#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdrianPiecykLaby5
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AdrianPiecykLaby5")]
	public partial class AdrianPiecykLaby5DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertConnector(Connector instance);
    partial void UpdateConnector(Connector instance);
    partial void DeleteConnector(Connector instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    #endregion
		
		public AdrianPiecykLaby5DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AdrianPiecykLaby5ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AdrianPiecykLaby5DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AdrianPiecykLaby5DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AdrianPiecykLaby5DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AdrianPiecykLaby5DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Connector> Connectors
		{
			get
			{
				return this.GetTable<Connector>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Connector")]
	public partial class Connector : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CoursesID;
		
		private int _StudentsID;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCoursesIDChanging(int value);
    partial void OnCoursesIDChanged();
    partial void OnStudentsIDChanging(int value);
    partial void OnStudentsIDChanged();
    #endregion
		
		public Connector()
		{
			this._Student = default(EntityRef<Student>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoursesID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CoursesID
		{
			get
			{
				return this._CoursesID;
			}
			set
			{
				if ((this._CoursesID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCoursesIDChanging(value);
					this.SendPropertyChanging();
					this._CoursesID = value;
					this.SendPropertyChanged("CoursesID");
					this.OnCoursesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentsID
		{
			get
			{
				return this._StudentsID;
			}
			set
			{
				if ((this._StudentsID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentsIDChanging(value);
					this.SendPropertyChanging();
					this._StudentsID = value;
					this.SendPropertyChanged("StudentsID");
					this.OnStudentsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Connector", Storage="_Student", ThisKey="StudentsID", OtherKey="StudentsID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Connectors.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Connectors.Add(this);
						this._StudentsID = value.StudentsID;
					}
					else
					{
						this._StudentsID = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Connector", Storage="_Course", ThisKey="CoursesID", OtherKey="CoursesID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Connectors.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Connectors.Add(this);
						this._CoursesID = value.CoursesID;
					}
					else
					{
						this._CoursesID = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentsID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _DateOfBirth;
		
		private EntitySet<Connector> _Connectors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentsIDChanging(int value);
    partial void OnStudentsIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnDateOfBirthChanging(string value);
    partial void OnDateOfBirthChanged();
    #endregion
		
		public Student()
		{
			this._Connectors = new EntitySet<Connector>(new Action<Connector>(this.attach_Connectors), new Action<Connector>(this.detach_Connectors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentsID
		{
			get
			{
				return this._StudentsID;
			}
			set
			{
				if ((this._StudentsID != value))
				{
					this.OnStudentsIDChanging(value);
					this.SendPropertyChanging();
					this._StudentsID = value;
					this.SendPropertyChanged("StudentsID");
					this.OnStudentsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="NVarChar(50)")]
		public string DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Connector", Storage="_Connectors", ThisKey="StudentsID", OtherKey="StudentsID")]
		public EntitySet<Connector> Connectors
		{
			get
			{
				return this._Connectors;
			}
			set
			{
				this._Connectors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Connectors(Connector entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Connectors(Connector entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CoursesID;
		
		private string _Name;
		
		private string _ECTSPoints;
		
		private EntitySet<Connector> _Connectors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCoursesIDChanging(int value);
    partial void OnCoursesIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnECTSPointsChanging(string value);
    partial void OnECTSPointsChanged();
    #endregion
		
		public Course()
		{
			this._Connectors = new EntitySet<Connector>(new Action<Connector>(this.attach_Connectors), new Action<Connector>(this.detach_Connectors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoursesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CoursesID
		{
			get
			{
				return this._CoursesID;
			}
			set
			{
				if ((this._CoursesID != value))
				{
					this.OnCoursesIDChanging(value);
					this.SendPropertyChanging();
					this._CoursesID = value;
					this.SendPropertyChanged("CoursesID");
					this.OnCoursesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ECTSPoints", DbType="NVarChar(50)")]
		public string ECTSPoints
		{
			get
			{
				return this._ECTSPoints;
			}
			set
			{
				if ((this._ECTSPoints != value))
				{
					this.OnECTSPointsChanging(value);
					this.SendPropertyChanging();
					this._ECTSPoints = value;
					this.SendPropertyChanged("ECTSPoints");
					this.OnECTSPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Connector", Storage="_Connectors", ThisKey="CoursesID", OtherKey="CoursesID")]
		public EntitySet<Connector> Connectors
		{
			get
			{
				return this._Connectors;
			}
			set
			{
				this._Connectors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Connectors(Connector entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Connectors(Connector entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
}
#pragma warning restore 1591
